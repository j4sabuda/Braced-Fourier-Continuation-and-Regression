"""
Precomputed data for use in the BFCR algorithm.
@author: Josef M Sabuda

left_bracing_data and right_bracing_data below were taken as the first 12 and 
last 12 points, repectively, of the following equation discretized to N=1000 
points on the interval [0,1]:
f(x) = exp(sin(5.4πx − 2.7π) − cos(2πx)) − sin(2.5πx) + 1

This equation is known to have a smooth Fourier Continuation, as it was taken
from the following FC paper:
https://arxiv.org/abs/2010.03901

Matrix left and matrix right come from applying the FC process described in 
that paper to left_bracing_data and right_bracing_data, respectively, with the 
following choice of FC parameters (utilizing the same nomenclature as in the 
paper above):
d = 12
C = 27
Z = 0
n_over = 20 
"""

def BFCR_precomputed_data():
    import numpy as np
    
    #Precomputed bracing data
    left_bracing_data = np.array([1.16381509, 1.15435798, 1.14496124, 1.13562439, 1.12634697, 1.11712855, 1.10796876, 1.09886722, 1.08982364, 1.08083771, 1.07190919, 1.06303785])
    right_bracing_data = np.array([0.91438601, 0.90666713, 0.89886865, 0.89099685, 0.88305804, 0.87505859, 0.86700488, 0.85890332, 0.8507603,  0.84258226, 0.83437557, 0.82614663])
    
    #Precomputed continuation data
    matrix_left = np.array([-3.521574050966625395e-18,-3.499821388006030888e-16,6.504899912243415107e-12,1.451043921737310560e-09,9.867814568242927464e-08,3.056839801285349267e-06,5.217191487361105828e-05,5.493881731979399774e-04,3.847730610686994623e-03,1.890765559528517770e-02,6.788841621164465323e-02,1.840966361669416074e-01,3.884004061983432621e-01,6.569012556428788230e-01,9.211099741660291329e-01,1.114149061744683422e+00,1.215715953658218496e+00,1.249886848199821543e+00,1.251492365365265869e+00,1.242813526427198667e+00,1.232377170208565076e+00,1.222099985337990802e+00,1.212102137655620027e+00,1.202277063659266787e+00,1.192557011399600242e+00,1.182912548561937172e+00,1.173332982992665308e+00],dtype='float64')
    matrix_right = np.array([8.179027418723450182e-01,8.096552313531901746e-01,8.014272187222104549e-01,7.932700890805790550e-01,7.852945512240694370e-01,7.777236386609729379e-01,7.709610160964075476e-01,7.655364507809281349e-01,7.612592765362933278e-01,7.541635723318904638e-01,7.314171015750616789e-01,6.709667509421706200e-01,5.557763315737247467e-01,3.962241057306528091e-01,2.330646244809031487e-01,1.091417967109009624e-01,3.940056142164394259e-02,1.060952218540478498e-02,2.049976163107203320e-03,2.699596857382857706e-04,2.241898596366809215e-05,1.018320070045319881e-06,1.649445946494410009e-08,-2.504631259336864701e-10,-7.922412183745952685e-12,-3.283775911135284904e-14,-1.006606136367752190e-17],dtype='float64')
    
    return(left_bracing_data,right_bracing_data,matrix_left,matrix_right)
    
if __name__ == "__main__":
    left_bracing_data,right_bracing_data,matrix_left,matrix_right = BFCR_precomputed_data()
